<title>DeCE: the ENDF-6 data interface and nuclear data evaluation assist code</title>
<author>Toshihiko Kawano</author>
<year>2019</year>
<Jounral>JOURNAL OF NUCLEAR SCIENCE AND TECHNOLOGY</Journal>
<Affiliation>Theoretical Division, Los Alamos National Laboratory, Los Alamos, NM, USA</Affiliation>
<Publishing_house>Taylor & Francis</Publishing_house>
<Text_Collector>田苗，BFSU</Text_Collector>
<DOI>10.1080/00223131.2019.1637797</DOI>
<URL>https://doi.org/10.1080/00223131.2019.1637797</URL>
ABSTRACT
We present the computer program DeCE developed at Los Alamos National  Laboratory,  which is open-source software to assist in producing evaluated nuclear data ﬁles. DeCE manipulates a provided evaluated nuclear  data ﬁle  interactively,  then  creates a  new ﬁle  in  an ENDF-6 legitimate format. DeCE also extracts numerical data given in an evaluated ﬁle and converts into a more readable format. The code includes two C++ libraries, ENDFLIB and ENDFIO, which fulﬁll a demand for easy interface between a modern computer programming technique and the inﬂexible ENDF-6 format. We overview the DeCE code and the libraries employed there, and demonstrate their capabilities.
KEYWORDS
Evaluated nuclear data library; ENDF format; DeCE; C++ library
1.Introduction
The evaluated nuclear data libraries, such as JENDL-
4.0 [1], ENDF/B-VIII.0 [2], JEFF-3 [3], and CENDL-3
[4]are the indispensable resource for nuclear technol- ogy whenever the particle transport simulation is involved. These libraries are revised occasionally by including advanced experimental and theoretical knowledge of nuclear reaction and structure, as well as an innovative method to store important informa- tion of nuclear reaction mechanisms in an ASCII text ﬁle. For example, when one looks into the older ver- sion of the evaluated libraries, secondary particle energy and angular distributions are often stored sepa- rately in a data ﬁle, namely the angular distribution is in MF 4 (MF stands for the ﬁle number in the  ENDF-6 format [5]) and the energy distribution can be found in MF 5. Such representation of the sec- ondary particle energy and angular distributions is regarded as obsolete, especially insuﬃcient for fusion technology applications, and modern evaluated libraries store such information in MF 6: the energy and angle correlated distribution. Note that we refer ENDF-6 as a data format that is designed to maintain the evaluated nuclear data in a computer ﬁle, and the readers shouldn’t be confused by the ENDF library.
Keeping the evaluated nuclear data library updated satisﬁes users’ demand for reducing uncertainties in radiation transport simulations owing to the evalu- ated nuclear data themselves. Having said that, pro- duction of the brand-new evaluated data ﬁle always creates another level of diﬃculties. This is because the ENDF-6 format [5] is a rigorous protocol to transfer the information at data evaluation to nuclear applica- tions, and one has to obey these inﬂexible rules even
if ENDF-6 still persists an old-fashioned 80-column card-image.
Naturally, there exists a new proposal to use more ﬂexible data formats, such as XML (eXtensible Markup Language), to maintain the nuclear reaction and  structure   data   [6].   However,   unfortunately,  a majority of computer programs still stick to the ENDF-6 format for the backward compatibility and quality assurance. In fact, the Generalized Nuclear Data Structure, GNDS [6], retains ENDF-6 ﬁle reproducibility.
Nuclear data compilation into the standard ENDF-6  formatted  ﬁle  remains  the  mainstream in the nuclear data application ﬁeld. Nakagawa developed the CRECTJ5 and CRECTJ6  codes  [7] for compiling the JENDL libraries [1], taking advantage of implicit  aﬃnity  between  ENDF-6 and FORTRAN. Since recent codes for calculating nuclear reactions or processing nuclear data libraries, such as CCONE [8], AMUR [9],  CoH3 [10], and FRENDY [11], are often written in C++, we anticipate that demand for a substantial inter- face between a modern computer programming technique and the stiﬀ FORTRAN-ish rules  does not vanish.
The computer program DeCE, ‘Descriptive Correction of ENDF-6 format,’ is open-source software developed at Los Alamos National Laboratory, to provide the interface between ENDF-6 and C++. DeCE facilitates manipulating the evaluated nuclear data ﬁles, as well as making a new evaluation in the legitimate ENDF-6 for- mat. The code is built on top of core C++ libraries, ENDFLIB and ENDFIO, which oﬀer an easy access to the past ENDF-6 formatted ﬁles. This paper presents the computational technique employed in DeCE and demonstrates how DeCE can promote the data science in the nuclear technology ﬁeld. DeCE is a modest size C++ code, 1.2 MBytes, 20,000 lines, and available at GitHub (https://github.com/toshihikokawano/DeCE). DeCE runs on a UNIX-like platform, such as Linux and MacOS. At this moment Windows is  not  supported,  but we plan to provide the Windows version as we anticipate there could be such a demand.
2.Object-oriented programming for ENDF-6 data
2.1.ENDF class
An evaluated nuclear data ﬁle consists of several parts, called the ﬁle number MF, where for example, MF ¼ 1 is for a general description, MF ¼ 2 is for resonance para- meters, MF 3 is for reaction cross sections, and so on. Each MF is also divided into smaller sections, identiﬁed by the reaction type number MT; MT 1  is  the  total cross section, 2 is the elastic scattering, 102 is the capture, etc. We process the evaluated nuclear data section-by-
Figure 1. An example of data block that contains the HEAD and TAB1 records deﬁned in ENDF-6. This data block includes two CONT records, arrays of integer and ﬂoating-point num- bers. N1 ¼ 1 indicates there are a pair of integer data, and   N5 ¼ 5 means there are ﬁve ðEn; σÞ pairs.
need, nor how large these data arrays could be, we deﬁne the ENDF class by using pointers,
class ENDFf
private :
section, which is speciﬁed by a pair of ½MF; MT] numbers.
Although ENDF-6 is still in the old card-image, its well-structured design is suitable for converting data into a so-called object. The most primitive data structure deﬁned in ENDF-6 is the CONT (control) record, which contains a couple of ﬂoating-point variables and four integers. This CONT line is copied into the CONT class of C++,@1
where we follow the ENDF-6 standard nomenclature. Each data section starts with a special CONT record, called HEAD. The HEAD record is followed by other data blocks whose data structure depends on the properties of stored nuclear data. For example, the cross-section data in MF ¼ 3 are a set of incident particle  energies  and  cross  sections  En; σ  with some integers to indicate how these data points are interpolated. ENDF-6 holds these data in one CONT as well as arrays for both integer and ﬂoating-point numbers, which is called a TAB1 record. We handle these HEAD + TAB1 data as a data block, which is shown in Figure 1. In the case of scattering angular distribution, it consists of three-dimensional data (En, θ, dσ=dΩ) that require more data blocks. Generally, since  we  don’t  know  how  many  CONT  records we Figure 1. An example of data block that contains the HEAD and TAB1 records deﬁned in ENDF-6. This data block includes two CONT records, arrays of integer and ﬂoating-point num- bers. N1 ¼ 1 indicates there are a pair of integer data, and   N5 ¼ 5 means there are ﬁve ðEn; σÞ pairs.
need, nor how large these data arrays could be, we deﬁne the ENDF class by using pointers,
@2
where H is the HEAD record, the data are stored in integer and ﬂoating-point buﬀers, I and X, dynamically allocated ina heap. PI and PX are the pointer-to-pointers, where PIðnÞ contains the address of n-th element of IðnÞ. The private member variable NB is the number of data blocks currently stored in the ENDF object. Figure 2 shows how the I and X buﬀers are accessed by PI and PX. There are three data blocks, and the ﬁrst block con- tains 3 integers and 6 ﬂoating-point numbers. The second block has 4 and 2, and so on. We do not memorize the total numbers of integer and ﬂoating-point data, NI and NX, because they can be calculated as
@3
@4
so that we just need NB  only. Similarly, the num- ber of elements in each block can be calculated by the pointers.
Figure 2. An integer pointer and a ﬂoating-point pointer to store arbitrary number of data in one-dimensional buﬀers. The last pointers point just one element outside the stored data.
2.2.ENDFLIB and ENDFIO libraries
In ENDF-6, data given in an MF; MT section are organized by four data structures [5], CONT, LIST, TAB1, and TAB2. The TAB2 block can contain other data blocks of LIST or TAB1. The ENDFLIB library includes many utilities to facilitate reading and writ- ing these deﬁned structures. For example,
2.4.The DeCE code
By applying the programming technique employed in ENDF and ENDFDict classes, the computer code DeCE processes the evaluated nuclear data ﬁles inter- actively. DeCE reads and writes the ENDF-6 ﬁles through the ENDFLIB and ENDFIO libraries, and holds the data in the memory as the ENDF object. DeCE works in a following way;
●Read entire evaluated nuclear data ﬁle, and store all data in the ENDF objects. DeCE assigns one ENDF object to each MF; MT section;
●Accept user’s command, and manipulate the target object according to the given command and options;
●Repeat the operation until quit command; then
●Create a new evaluated ﬁle.
The structure of DeCE is shown in Figure 3. In addition to the main DeCE code, the DeCE dis- tribution package includes a collection of short
ENDFReadTAB1 is a function to read the TAB1-
type data, ENDFWriteCONT prints a CONT record in the object currently accessing to.
Since ENDF-6 economizes on  ASCII text ﬁeld,    a numeric text like ‘1.000000 + 3’, which is  red  easily by FORTRAN as 103, is preferred, while International Organization for  Standardization, ISO 6093  –  Representation  of  numerical  values  in character strings for information interchange – may require a letter E before the plus sign. The E-letter padding is automatically  done  in ENDFLIB.
The ENDFIO library oﬀers an  easy  access  to  the evaluated nuclear data ﬁle. The function ENDFRead copies data  in  the  ﬁle  speciﬁed  by  MF; MT to  the  object.  The   ENDF   object   data are printed by a function ENDFWrite in the ENDF-6 appropriate format. Since  each  section has  a  diﬀerent  data  structure   depending   on   MF; MT , one has to consult the ENDF-6 manual
[5]for extracting requisite information if needed. Otherwise, these functions, ENDFRead and ENDFWrite, should work properly for all the
½MF; MT] sections.
ENDFDict class
The ENDFDict  class  controls   the   data   structure   in a given ENDF-6 ﬁle, as well as methods to access some information given in the header part of the evaluated data ﬁle. For instance, the member function getEMAX() tells the highest energy of the current ﬁle. Unlike the ENDF class, this object does not contain any nuclear data but plays a central role  in  making  a  new  evaluated data ﬁle.
2.4.The DeCE code
By applying the programming technique employed in ENDF and ENDFDict classes, the computer code DeCE processes the evaluated nuclear data ﬁles inter- actively. DeCE reads and writes the ENDF-6 ﬁles through the ENDFLIB and ENDFIO libraries, and holds the data in the memory as the ENDF object. DeCE works in a following way;
●Read entire evaluated nuclear data ﬁle, and store all data in the ENDF objects. DeCE assigns one ENDF object to each MF; MT section;
●Accept user’s command, and manipulate the target object according to the given command and options;
●Repeat the operation until quit command; then
●Create a new evaluated ﬁle.
The structure of DeCE is shown in Figure 3. In addition to the main DeCE code, the DeCE dis- tribution package includes a collection of short independent programs called the DeCE tools,  which  do  not  ﬁt  into  Figure  3.  Some  examples  of the DeCE tools are given later.
The current version of DeCE recognizes more than 20 commands, which are given in the DeCE manual provided in the DeCE distribution pack- age. Here we present some examples to demon- strate how DeCE works. The DUPLICATE command creates a new object and copy all the source object data into the destination. The DELETE  command  removes  one  ½MF; MT] section, or whole MT sections in the same MF. The READ command   imports   external   data   prepared   in   a  data  ﬁle  into  the  speciﬁed   MF; MT   section. The TABLE  command  tabulates  the  stored  data in a human-readable format. There are some commands inspired by CRECTJ  as  well.  The CALC command gives the sum, diﬀerence, ratio, and product  of  two  sections  in  MF 3.  The MAKE4 command generates the total inelastic scattering cross section from  the  partial  level  cross sections.
DeCE   is   also   capable   of   reconstructing point-
wise  cross-section  as  well  as  the  elastic  scattering
Figure 3. The schematic illustration of DeCE that uses the ENDFLIB and ENDFIO libraries as an interface between an ENDF-6 ﬁle and an ENDF object.
angular distributions from the resonance para-  meters   given   in   MF    2.   Because   DeCE   is   not  a data  processing  code  like  FRENDY  [11]  or  NJOY [12], this functionality is somewhat  limited. For example, DeCE automatically generates the energy-grid in  a  relatively  simple  way  that  may  not guarantee a  user-provided  tolerance,  whereas the processing codes  carefully  choose  the  abscissa  to satisfy the given tolerance. DeCE does not per- form the Doppler broadening either. As examples, reconstructed total and capture cross sections of Ni are shown in Figure 4. Figure 5 shows the  calcu-  lated P1 and P2 Legendre coeﬃcients [13] in the resolved resonance region. The Reich-Moore reso- nance parameters are taken from ENDF/B-VIII.
3.Code capabilities and discussions
3.1.The showcase
We designed DeCE so ﬂexible that  implementa- tion of new commands does not require much  work. In fact, since it is an open-source software, the functionality keeps enhancing by  incorporat- ing users’ special demands. Here we demonstrate the most frequently used command, CALC,  which is similar to the OPERATE command in CRECTJ [7]. Experimental total cross sections in the fast energy range often reveal  strong  ﬂuctuation  even if the energy range is above the  resolved  reso- nance region. To evaluate such data, the most realistic  method  is  to  trace  the   experimental total cross section data, as it is  impossible  to  predict the exact ﬂuctuation by nuclear reaction theories. While the elastic scattering cross section, usually calculated by the optical model, shows smooth behavior, as the optical model gives an energy-average cross section by deﬁnition. Assuming other reaction channels, neutron
Figure 4. Reconstructed point-wise cross sections of 58Ni with DeCE. The solid curve is the total cross section and the dashed curve is the capture cross-section.
Figure 5. Calculated Legendre coeﬃcients for neutron elastic scattering of 58Ni. The solid curve is for the P1 component, and the dashed curve is for P2.
radiative capture, ﬁssion, inelastic  scattering,  and so on, vary smoothly, we can reconcile the ﬂuc- tuating nature in the total cross-section with the optical-model calculated elastic scattering cross section.
First,  a   non-elastic   scattering   cross   section  MF; MT      3; 3    is  reconstructed  by  summing  up  all the partial cross sections, then  subtract  it  from  the experimental total cross section to evaluate the elastic scattering cross section. The sequence of these operations is like
@5
where   the   ﬁrst   line   adds   inelastic   scattering and
ðn; 2nÞ    cross   sections   and   put   the   result   into
½MF; MT]¼ ½3; 3]. The  second  line  instructs DeCE to add  the  ðn; nαÞ  cross  section  to  ½3; 3],  etc.  The  re- calculated elastic scattering cross  section  of  Ni  in the 1–1.5 MeV region is compared with the optical model result in Figure 6, which is above the upper boundary of the resonance range of 812 keV. The ﬂuctuation in the total cross section introduces simi- lar behavior in the elastic scattering channel.  Note that the assumption of the smoothness in the other reaction channels is not so correct, as they may ﬂuc- tuate as well to some extent.
Since DeCE processes data section-by-section, data access across diﬀerent  MF sections  needs  to be handled in a diﬀerent way. For example, to calculate diﬀerential elastic scattering cross sec- tions, we need both the  elastic  cross  section  in  MF; MT 3; 2 and the Legendre coeﬃcients or tabulated distributions given in 4; 2 . DeCE keeps these data  in  two  objects,  and  multiplication  of  3; 2 and 4; 2 is not allowed, because  these  data could be on the diﬀerent energy-grids. We  pro- vide such capability through the  DeCE  tools,  where ENDFLIB and ENDFIO are still centered. The DeCE tools are a collection of independent short programs provided in the DeCE distribution package. Each of them  undertakes  a  particular  task by utilizing ENDFLIB and ENDFIO to read  and write ENDF data.
The diﬀerential elastic scattering cross section of deuteron is calculated from  the  angle-integrated cross section and the Legendre coeﬃcients in ENDF/B-VIII, which is shown in Figure 7. At ther- mal, the scattering angular distribution is isotropic
Figure 6. Fluctuation in the elastic scattering cross section introduced by the experimental total cross section of 58Ni in the 1–1.5 MeV range. DeCE re-distributes the ﬂuctuation on the optical-model calculated smoothed cross section shown by the dashed line.
Figure 7. Elastic scattering angular distribution of deuteron, reconstructed from the  elastic  scattering  cross  section  in  MF ¼ 3 and the Legendre coeﬃcients in MF ¼ 4.
in the center-of-mass system, and the thermal scat- tering cross section is 3.395 b, so that the diﬀeren-   tial cross section is 0.27 b/sr, which one can see in Figure 7.
Similarly, we can calculate particle production cross sections, which are usually not given expli- citly in the evaluated nuclear data  ﬁle,  and  we  need to  combine MF   3 and  6.  A  typical example is the photo-nuclear data library, where the total photon absorption cross section σabs is given explicitly  in   MF; MT    3; 5 ,   while  MF   6  con- tains production probabilities of particles or resi- dual nuclei. Figure 8 shows the 93Nb data in JENDL/PD-2016 [14], processed with one of the DeCE tools. The production cross sections of neutron and charged particles can be calculated
Figure 8. Photo-nuclear reaction cross section of 93Nb in JENDL/PD-2016. Only the photo-absorption cross-section, shown by the solid line, is explicitly given in the photo- nuclear data library.
easily because they are given  in  MF  ¼ 6  as  ratios to σabs. The γ; n cross-section, albeit given impli- citly, is also calculated unambiguously. However, the  experimental  γ; n data can  be  larger than the γ; n	cross-section given in the evaluated ﬁle, because one-neutron emission concurrent with charged-particle	emissions		can		happen. Therefore, we  understand  the  experimental  data to  be		γ; 1n	x . The DeCE tool aggregates all reaction		channels		which		involve	one-neutron emission  into  the	γ; 1n	x	cross-section. This cross section is systematically higher  than  γ; n above 20 MeV.
3.2.Perspective
As demonstrated, DeCE and its tools help validating evaluated nuclear data ﬁles by extracting the data contents in a more convenient form. Obviously, no new physics is involved there, as the data science employed in DeCE just manipulates the evaluated nuclear data only. However, DeCE  (or  ENDFLIB  and ENDFIO) reduces nuclear data users’ unneces- sary burden of producing new evaluations, as well as extracting required information from the evaluated nuclear data ﬁles. To meet various user-demands that depend on how the nuclear data are utilized, it is important to share the source code, and this is why DeCE is distributed as open-source software.
We envisage that DeCE (or at least ENDFLIB and ENDFIO libraries) will be an indispensable tool for scientists who are involved in the nuclear data pro- duction and application ﬁelds. There could be some potential subjects in which DeCE can participate in. The simplest case is the nuclear data sensitivity study. As it is very easy to give a small perturbation to the  evaluated ﬁles with DeCE, one can see how particular nuclear data impact the radiation transport calcula- tion, without modifying neither the processing nor transport simulation code.
ENDFLIB  and  ENDFIO  could   be   included  in   a nuclear reaction model code to produce the evalu- ated data ﬁle on-the-ﬂy. In fact, DeCE reads a special ﬁle generated by CoH3 [10] and creates a new ENDF- 6 ﬁle. It is quite possible to produce the evaluated ﬁle directly from such nuclear reaction codes without making interim ﬁles by incorporating the DeCE libraries (the resonance parameters have to be imported    from    somewhere).    This    will    create  a smooth streamline from the nuclear reaction theory to the Monte Carlo transport simulation, as well as direct feedback from the integral data to the para- meters in physics models.
According to this line of thinking, one of the more extreme ideas is to apply DeCE to the resonance analysis. Measured data in the resonance region are often distorted due to the experimental energy
resolution, the self-shielding eﬀect, the multiple scat- tering eﬀect, and so on. To account for all these corrections, one can perform a full Monte Carlo simulation for the entire experimental apparatus to investigate the detector response provided the reso- nance parameters in the evaluated ﬁle. Once sensitiv- ities of the resonance parameters to the detector outputs are calculated, we can perform the least- squares ﬁtting, or more eﬃcient multi-parameter optimization technique, directly to the measured quantities without converting them into the real cross-section data.
In summary, DeCE can be an alternative to CRECTJ, yet DeCE does not emulate all the function- ality in CRECTJ. The missing part, such as the group- average, can be done with NJOY. We emphasize that maintaining the user community is indispensable for the development of DeCE as open source. GitHub allows users to report any issues or requests. In fact, we have been improving the source code thanks to   the DeCE users, not only internal but also outside LANL. In addition, anybody can modify the source code and request these modiﬁcations to be merged  into the main branch through the Git  mechanism. We always maintain DeCE up-to-date to meet the user’s demand.
4.Conclusion
In this paper, we described ENDF-6 data interface libraries, ENDFLIB and ENDFIO written in C++, which facilitate access to numerical data in the eval- uated nuclear data ﬁles. The ENDF class deﬁned in ENDFLIB is designed to eﬃciently store the compli- cated data structure of ENDF-6. The open-source software DeCE is built on top of these  libraries.  DeCE processes an ENDF-6 data ﬁle interactively to assist in editing the data ﬁle, in correcting evaluated data, and in producing a new evaluated ﬁle. We demonstrated the capability implemented in the cur- rent version of DeCE as well as in the satellite tools   by showing some examples; arithmetic operation of two data sections, reconstruction of point-wise cross sections from resonance parameters, production of data sections for particle production cross sections, and production of diﬀerential elastic scattering cross sections.
Acknowledgments
The  author thanks to  P. Talou,  M. Paris,  M.B.  Chadwick,
G. Hale, I. Stetcu, and M. White of LANL, I. Thompson of LLNL, D.A. Brown of BNL, N. Otsuka and S. Okumura of IAEA, S. Kunieda of JAEA, and H.I. Kim of KAERI for positive feedback and encouragement to develop DeCE. This work was carried out under the auspices of the National   Nuclear   Security   Administration   of   the   U.S.Department of Energy at Los Alamos National Laboratory under Contract No. 89233218CNA000001.
Disclosure statement
No potential conﬂict of interest was reported by the author.
